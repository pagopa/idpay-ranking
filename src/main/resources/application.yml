server:
  port: ${RANKING_PORT:8080}

info:
  build:
    artifact: "@project.artifactId@"
    name: "@project.artifactId@"
    description: "@project.description@"
    version: "@project.version@"

spring:
  application:
    name: "@project.artifactId@"
    version: "@project.version@"
  jmx.enabled: true
  config:
    activate:
      on-profile: default
  cloud:
    stream:
      function:
        definition: onboardingRankingRequestsConsumer;initiativeRankingConsumer
      bindings:
        onboardingRankingRequestsConsumer-in-0:
          destination: ${KAFKA_ONBOARDING_RANKING_REQUESTS_TOPIC:idpay-onboarding-ranking-request}
          group: ${KAFKA_ONBOARDING_RANKING_REQUESTS_GROUP_ID:idpay-onboarding-ranking-request-consumer-group}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-onboarding-ranking-requests
        initiativeRankingConsumer-in-0:
          destination: ${KAFKA_INITIATIVE_RANKING_TOPIC:idpay-rule-update}
          group: ${KAFKA_INITIATIVE_RANKING_GROUP_ID:idpay-rule-update-ranking-consumer-group}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-initiative-ranking
        errors-out-0:
          destination: ${KAFKA_ERROR_TOPIC:idpay-errors}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-errors
      binders:
        kafka-onboarding-ranking-requests:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_ONBOARDING_RANKING_REQUESTS_BROKER:${KAFKA_BROKER:}}
              configuration:
                sasl.jaas.config: ${KAFKA_ONBOARDING_RANKING_REQUESTS_SASL_JAAS_CONFIG:}
        kafka-initiative-ranking:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_INITIATIVE_RANKING_BROKER:${KAFKA_BROKER:}}
              configuration:
                sasl.jaas.config: ${KAFKA_INITIATIVE_RANKING_SASL_JAAS_CONFIG:}
        kafka-errors:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_ERRORS_BROKER:${KAFKA_BROKER:}}
              configuration:
                sasl.jaas.config: ${KAFKA_ERRORS_SASL_JAAS_CONFIG:}
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat.interval.ms: ${KAFKA_RANKING_BINDER_CONFIGURATION_HEARTBEAT_INTERVAL_MS:30000}
            session.timeout.ms: ${KAFKA_RANKING_BINDER_CONFIGURATION_SESSION_TIMEOUT_MS:60000}
            request.timeout.ms: ${KAFKA_RANKING_CONFIG_REQUEST_TIMEOUT_MS:60000}
            sasl.mechanism: ${KAFKA_RANKING_SASL_MECHANISM:PLAIN}
            security.protocol: ${KAFKA_RANKING_SECURITY_PROTOCOL:SASL_SSL}
        bindings:
          onboardingRankingRequestsConsumer-in-0:
            consumer:
              startOffset: ${KAFKA_ONBOARDING_RANKING_REQUESTS_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: false
              ackMode: MANUAL_IMMEDIATE
              ackTime: ${KAFKA_ONBOARDING_RANKING_REQUESTS_ACK_MILLIS:10000}
              standardHeaders: ${KAFKA_ONBOARDING_RANKING_REQUESTS_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_ONBOARDING_RANKING_REQUESTS_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_ONBOARDING_RANKING_REQUESTS_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_ONBOARDING_RANKING_REQUESTS_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:300000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_ONBOARDING_RANKING_REQUESTS_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_ONBOARDING_RANKING_REQUESTS_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
          initiativeRankingConsumer-in-0:
            consumer:
              startOffset: ${KAFKA_INITIATIVE_RANKING_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: false
              ackMode: MANUAL_IMMEDIATE
              ackTime: ${KAFKA_INITIATIVE_RANKING_ACK_MILLIS:10000}
              standardHeaders: ${KAFKA_INITIATIVE_RANKING_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_INITIATIVE_RANKING_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_INITIATIVE_RANKING_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_INITIATIVE_RANKING_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:300000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_ONBOARDING_RANKING_REQUESTS_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_ONBOARDING_RANKING_REQUESTS_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
          errors-out-0:
            producer:
              configuration:
                client.id: transactions-errors
                connections.max.idle.ms: ${KAFKA_ERRORS_CONNECTION_MAX_IDLE_TIME:180000}
                retry.backoff.ms: ${KAFKA_ERRORS_KAFKA_RETRY_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_ERRORS_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_ERRORS_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017}
      database: ${MONGODB_DBNAME:idpay}
      # custom configured properties
      config:
        connectionPool:
          maxSize: ${MONGODB_CONNECTIONPOOL_MAX_SIZE:100}
          minSize: ${MONGODB_CONNECTIONPOOL_MIN_SIZE:10}
          maxWaitTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_WAIT_MS:120000}
          maxConnectionLifeTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_LIFE_MS:0}
          maxConnectionIdleTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_IDLE_MS:0}
          maxConnecting: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTING:2}

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    it.gov.pagopa: ${LOG_LEVEL_PAGOPA:INFO}
    it.gov.pagopa.idpay: ${LOG_LEVEL_IDPAY:INFO}
    org.springframework.integration: ${LOG_LEVEL_SPRING_INTEGRATION:INFO}
    org.springframework.security: ${LOG_LEVEL_SPRING_SECURITY:INFO}
    org.springframework.ws: ${LOG_LEVEL_SPRING_WS:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.hateoas: ${LOG_LEVEL_SPRING_HATEOAS:INFO}
    org.springframework.boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
    org.springframework.kafka: ${LOG_LEVEL_SPRING_KAFKA:INFO}
    org.springframework.batch: ${LOG_LEVEL_SPRING_BATCH:INFO}
    io.swagger: ${LOG_LEVEL_IO_SWAGGER:WARN}
    javax.persistence: ${LOG_LEVEL_JAVAX_PERSISTENCE:INFO}
    org.hibernate: ${LOG_LEVEL_ORG_HIBERNATE:INFO}
    org.mongodb.driver: ${LOG_LEVEL_MONGODB_DRIVER:WARN}